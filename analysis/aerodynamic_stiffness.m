%% AERODYNAMIC STIFFNESS
% calculate the aerodynamic stiffness for a satellite for different control surface configurations
import vleo_aerodynamics_core.*
clear;

%load model data
bodies = load_model();

%load environment data
run("environment_definitions.m");

%% load model data
[test_folder,~,~] = fileparts(matlab.desktop.editor.getActiveFilename);
display(test_folder)
lut = fullfile(test_folder, 'cl_cd_cVAE_A01_flat_and_bird.csv');
if ~isfile(lut)
    error("Look-up table file not found. Please check the path: %s", lut);
end

%% show bodies
showBodies(bodies, [0,pi/4,pi/4,pi/4,pi/4], 0.75, 0.25);

%% calculate aerodynamic stiffness
num_angles = 101;
control_surface_angles__rad = linspace(pi/180, pi/2, num_angles);
aero_stiffness_pitch = nan(num_angles,2);
for model = 1:2
    for i = 1:num_angles
        delta_alpha = pi/1800000;
        current_angle = control_surface_angles__rad(i);
        bodies_rotation_angles__rad = ones(1,5) * current_angle;

        dir = [0; 1; 0];
        attitude_angle = -2*delta_alpha;
        attitude_quarternion_BI = [cos(attitude_angle/2); sin(attitude_angle/2) * dir];
        [~,torque_1] = vleoAerodynamics(...
                attitude_quarternion_BI,...
                rotational_velocity_BI_B__rad_per_s,...
                velocity_I_I__m_per_s,...
                wind_velocity_I_I__m_per_s,...
                density__kg_per_m3,...
                temperature__K,...
                particles_mass__kg,...
                bodies,...
                bodies_rotation_angles__rad,...
                temperature_ratio_method,...
                model,...
                lut);

        attitude_angle = -delta_alpha;
        attitude_quarternion_BI = [cos(attitude_angle/2); sin(attitude_angle/2) * dir];
        [~,torque_2] = vleoAerodynamics(...
                attitude_quarternion_BI,...
                rotational_velocity_BI_B__rad_per_s,...
                velocity_I_I__m_per_s,...
                wind_velocity_I_I__m_per_s,...
                density__kg_per_m3,...
                temperature__K,...
                particles_mass__kg,...
                bodies,...
                bodies_rotation_angles__rad,...
                temperature_ratio_method,...
                model,...
                lut);
        attitude_angle = delta_alpha;
        attitude_quarternion_BI = [cos(attitude_angle/2); sin(attitude_angle/2) * dir];
        [~,torque_3] = vleoAerodynamics(...
                attitude_quarternion_BI,...
                rotational_velocity_BI_B__rad_per_s,...
                velocity_I_I__m_per_s,...
                wind_velocity_I_I__m_per_s,...
                density__kg_per_m3,...
                temperature__K,...
                particles_mass__kg,...
                bodies,...
                bodies_rotation_angles__rad,...
                temperature_ratio_method,...
                model,...
                lut);
        attitude_angle = 2*delta_alpha;
        attitude_quarternion_BI = [cos(attitude_angle/2); sin(attitude_angle/2) * dir];
        [~,torque_4] = vleoAerodynamics(...
                attitude_quarternion_BI,...
                rotational_velocity_BI_B__rad_per_s,...
                velocity_I_I__m_per_s,...
                wind_velocity_I_I__m_per_s,...
                density__kg_per_m3,...
                temperature__K,...
                particles_mass__kg,...
                bodies,...
                bodies_rotation_angles__rad,...
                temperature_ratio_method,...
                model,...
                lut);
        aero_stiffness_pitch(i,model) = (-torque_4(2) + 8*torque_3(2) - 8*torque_2(2) + torque_1(2)) / (12 * delta_alpha);
    end
end

%% plot aerodynamic stiffness
figure;
semilogy(control_surface_angles__rad,aero_stiffness_pitch(:,1), 'LineWidth', 2);
hold on;
semilogy(control_surface_angles__rad, aero_stiffness_pitch(:,2), 'LineWidth', 2);
xlabel('Control Surface Angle [rad]');
ylabel('Aerodynamic Stiffness [Nm/rad]');
title('Aerodynamic Stiffness vs Control Surface Angle');
grid on;
legend('Sentman Model', 'New Model');